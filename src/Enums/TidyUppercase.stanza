defpackage tidy/Enums/TidyUppercase :
  import core

public deftype TidyUppercase
public deftype TidyUppercaseNo <: TidyUppercase
public deftype TidyUppercaseYes <: TidyUppercase
public deftype TidyUppercasePreserve <: TidyUppercase

public defn to-int (v:TidyUppercase) -> Int:
  match(v) :
    (x:TidyUppercaseNo) : 0
    (x:TidyUppercaseYes) : 1
    (x:TidyUppercasePreserve) : 2

public defn TidyUppercase (v:Int) -> TidyUppercase :
  switch {v == _}:
    0 : new TidyUppercaseNo
    1 : new TidyUppercaseYes
    2 : new TidyUppercasePreserve
    else: throw(Exception("Invalid Exception Value"))

public lostanza defn TidyUppercase (v:int) -> ref<TidyUppercase> :
  return TidyUppercase(new Int{v})

defmethod print (o:OutputStream, v:TidyUppercase) :
  match(v) :
    (x:TidyUppercaseNo) : print(o, "TidyUppercaseNo")
    (x:TidyUppercaseYes) : print(o, "TidyUppercaseYes")
    (x:TidyUppercasePreserve) : print(o, "TidyUppercasePreserve")

