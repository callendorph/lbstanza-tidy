; This file was auto-generated by lbstanza-wrapper
; Version 0.1.1
; Manual editing would be unwise
defpackage tidy/Enums/TidyUppercase :
  import core

public deftype TidyUppercase <: Equalable
public deftype TidyUppercaseNo_t <: TidyUppercase
public deftype TidyUppercaseYes_t <: TidyUppercase
public deftype TidyUppercasePreserve_t <: TidyUppercase

public val TidyUppercaseNo = new TidyUppercaseNo_t
public val TidyUppercaseYes = new TidyUppercaseYes_t
public val TidyUppercasePreserve = new TidyUppercasePreserve_t

public defn to-int (v:TidyUppercase) -> Int:
  match(v) :
    (x:TidyUppercaseNo_t) : 0
    (x:TidyUppercaseYes_t) : 1
    (x:TidyUppercasePreserve_t) : 2

public defn TidyUppercase (v:Int) -> TidyUppercase :
  switch {v == _}:
    0 : TidyUppercaseNo
    1 : TidyUppercaseYes
    2 : TidyUppercasePreserve
    else: throw(Exception("TidyUppercase: Invalid Enum Value: %_" % [v]))

public lostanza defn TidyUppercase (v:int) -> ref<TidyUppercase> :
  return TidyUppercase(new Int{v})

public defmethod print (o:OutputStream, v:TidyUppercase) :
  match(v) :
    (x:TidyUppercaseNo_t) : print(o, "TidyUppercaseNo")
    (x:TidyUppercaseYes_t) : print(o, "TidyUppercaseYes")
    (x:TidyUppercasePreserve_t) : print(o, "TidyUppercasePreserve")

public defmethod equal? (a:TidyUppercase, b:TidyUppercase) -> True|False :
  to-int(a) == to-int(b)

