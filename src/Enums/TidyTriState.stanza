defpackage tidy/Enums/TidyTriState :
  import core

public deftype TidyTriState
public deftype TidyNoState <: TidyTriState
public deftype TidyYesState <: TidyTriState
public deftype TidyAutoState <: TidyTriState

public defn to-int (v:TidyTriState) -> Int:
  match(v) :
    (x:TidyNoState) : 0
    (x:TidyYesState) : 1
    (x:TidyAutoState) : 2

public defn TidyTriState (v:Int) -> TidyTriState :
  switch {v == _}:
    0 : new TidyNoState
    1 : new TidyYesState
    2 : new TidyAutoState
    else: throw(Exception("Invalid Exception Value"))

public lostanza defn TidyTriState (v:int) -> ref<TidyTriState> :
  return TidyTriState(new Int{v})

defmethod print (o:OutputStream, v:TidyTriState) :
  match(v) :
    (x:TidyNoState) : print(o, "TidyNoState")
    (x:TidyYesState) : print(o, "TidyYesState")
    (x:TidyAutoState) : print(o, "TidyAutoState")

