; This file was auto-generated by lbstanza-wrapper
; Version 0.1.1
; Manual editing would be unwise
defpackage tidy/Enums/TidyOptionType :
  import core

public deftype TidyOptionType <: Equalable
public deftype TidyString_t <: TidyOptionType
public deftype TidyInteger_t <: TidyOptionType
public deftype TidyBoolean_t <: TidyOptionType

public val TidyString = new TidyString_t
public val TidyInteger = new TidyInteger_t
public val TidyBoolean = new TidyBoolean_t

public defn to-int (v:TidyOptionType) -> Int:
  match(v) :
    (x:TidyString_t) : 0
    (x:TidyInteger_t) : 1
    (x:TidyBoolean_t) : 2

public defn TidyOptionType (v:Int) -> TidyOptionType :
  switch {v == _}:
    0 : TidyString
    1 : TidyInteger
    2 : TidyBoolean
    else: throw(Exception("TidyOptionType: Invalid Enum Value: %_" % [v]))

public lostanza defn TidyOptionType (v:int) -> ref<TidyOptionType> :
  return TidyOptionType(new Int{v})

public defmethod print (o:OutputStream, v:TidyOptionType) :
  match(v) :
    (x:TidyString_t) : print(o, "TidyString")
    (x:TidyInteger_t) : print(o, "TidyInteger")
    (x:TidyBoolean_t) : print(o, "TidyBoolean")

public defmethod equal? (a:TidyOptionType, b:TidyOptionType) -> True|False :
  to-int(a) == to-int(b)

