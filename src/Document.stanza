defpackage tidy/Document :
  import core
  import tidy/Errors
  import tidy/Utils
  import tidy/Wrapper

lostanza deftype TidyDocFinalizer <: Finalizer :
  value:ptr<?>

lostanza defmethod run (self:ref<TidyDocFinalizer>) -> ref<False> :
  val ret = w_tidyRelease(self.value)
  ; TODO - log return value ?
  return false

public lostanza deftype TidyDoc <: Unique :
  value : ptr<?>

public lostanza defn TidyDoc () -> ref<TidyDoc> :
  val p:ptr<?> = w_tidyCreate()
  if p == null :
    throw(TidyFailure("Failed to Create TidyDoc - Null Response"))
  val ret = new TidyDoc{p}
  add-finalizer(new TidyDocFinalizer{p}, ret)
  return ret

public lostanza defn get-status (self:ref<TidyDoc>) -> ref<Int> :
  val ret = w_tidyStatus(self.value)
  return new Int{ret}

public lostanza defn get-html-version (self:ref<TidyDoc>) -> ref<Int> :
  val ret = w_tidyDetectedHtmlVersion(self.value)
  return new Int{ret}

public lostanza defn is-html-x? (self:ref<TidyDoc>) -> ref<True|False> :
  val ret = w_tidyDetectedXhtml(self.value)
  return to-bool(ret)

public lostanza defn is-xml? (self:ref<TidyDoc>) -> ref<True|False> :
  val ret = w_tidyDetectedGenericXml(self.value)
  return to-bool(ret)

public lostanza defn get-error-count (self:ref<TidyDoc>) -> ref<Int> :
  val ret = w_tidyErrorCount(self.value)
  return new Int{ret}

public lostanza defn get-warning-count (self:ref<TidyDoc>) -> ref<Int> :
  val ret = w_tidyWarningCount(self.value)
  return new Int{ret}

public lostanza defn get-access-warning-count (self:ref<TidyDoc>) -> ref<Int> :
  val ret = w_tidyAccessWarningCount(self.value)
  return new Int{ret}

public lostanza defn get-config-error-count (self:ref<TidyDoc>) -> ref<Int> :
  val ret = w_tidyConfigErrorCount(self.value)
  return new Int{ret}

public lostanza defn gen-error-summary (self:ref<TidyDoc>) -> ref<False> :
  w_tidyErrorSummary(self.value)
  return false

public lostanza defn gen-general-info (self:ref<TidyDoc>) -> ref<False> :
  w_tidyGeneralInfo(self.value)
  return false

public lostanza defn load-config (self:ref<TidyDoc>, configFile:ref<String>) -> ref<Int> :
  val ret = w_tidyLoadConfig(self.value, addr!(configFile.chars))
  return new Int{ret}

public lostanza defn load-config-enc (self:ref<TidyDoc>, configFile:ref<String>, encoding:ref<String>) -> ref<Int> :
  val ret = w_tidyLoadConfigEnc(self.value, addr!(configFile.chars), addr!(encoding.chars))
  return new Int{ret}

public lostanza defn set-char-encoding (self:ref<TidyDoc>, encoding:ref<String>) -> ref<Int> :
  val ret = w_tidySetCharEncoding(self.value, addr!(encoding.chars))
  return new Int{ret}

public lostanza defn set-in-char-encoding (self:ref<TidyDoc>, encoding:ref<String>) -> ref<Int> :
  val ret = w_tidySetInCharEncoding(self.value, addr!(encoding.chars))
  return new Int{ret}

public lostanza defn set-out-char-encoding (self:ref<TidyDoc>, encoding:ref<String>) -> ref<Int> :
  val ret = w_tidySetOutCharEncoding(self.value, addr!(encoding.chars))
  return new Int{ret}


public lostanza defn parse-file (self:ref<TidyDoc>, fpath:ref<String>) -> ref<Int> :
  val ret = w_tidyParseFile(self.value, addr!(fpath.chars))
  return new Int{ret}

public lostanza defn parse-str (self:ref<TidyDoc>, content:ref<String>) -> ref<Int> :
  val ret = w_tidyParseString(self.value, addr!(content.chars))
  return new Int{ret}

public lostanza defn clean-and-repair (self:ref<TidyDoc>) -> ref<Int> :
  val ret = w_tidyCleanAndRepair(self.value)
  return new Int{ret}

public lostanza defn run-diagnostics (self:ref<TidyDoc>) -> ref<Int> :
  val ret = w_tidyRunDiagnostics(self.value)
  return new Int{ret}

public lostanza defn report-doc-type (self:ref<TidyDoc>) -> ref<Int> :
  val ret = w_tidyReportDoctype(self.value)
  return new Int{ret}

public lostanza defn save-file (self:ref<TidyDoc>, fpath:ref<String>) -> ref<Int> :
  val ret = w_tidySaveFile(self.value, addr!(fpath.chars))
  return new Int{ret}

public lostanza defn save-stdout (self:ref<TidyDoc>) -> ref<Int> :
  val ret = w_tidySaveStdout(self.value)
  return new Int{ret}

