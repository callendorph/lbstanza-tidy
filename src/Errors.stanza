defpackage tidy/Errors :
  import core
  import tidy/Document
  import tidy/Buffer
  import tidy/Wrapper

public lostanza defn get-error-msg (code:ref<Int>) -> ref<String> :
  val ret = w_tidyErrorCodeAsKey(code.value)
  return String(ret)

public defstruct TidyException <: Exception:
  code:Int

defmethod print (o:OutputStream, e:TidyException) :
  val c = code(e)
  val m = get-error-msg(c)
  ; val m = "Message Unknown"
  print(o, "Tidy Error[%_]: %_" % [c, m])

public defstruct TidyFailure <: Exception :
  msg:String

public lostanza defn TidyFailure (msg:ptr<byte>) -> ref<TidyFailure> :
  return TidyFailure(String(msg))

defmethod print (o:OutputStream, e:TidyFailure) :
  val m = msg(e)
  print(o, "Tidy Failure: %_" % [m])

public lostanza defn set-error-file (doc:ref<TidyDoc>, fpath:ref<String>) -> ref<False> :
  w_tidySetErrorFile(doc.value, addr!(fpath.chars))
  return false

public lostanza defn set-error-buffer (doc:ref<TidyDoc>) -> ref<TidyBuffer> :
  val buf = TidyBuffer()
  val ret = w_tidySetErrorBuffer(doc.value, addr!(buf.allocator))
  if ret != 0 :
    throw(TidyException(new Int{ret}))
  return buf